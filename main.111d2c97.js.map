{"version":3,"sources":["scripts/main.js"],"names":["game","document","querySelector","gameField","startButton","startGame","gameOver","score","htmlElements","cells","size","scoreTotal","createField","y","tr","trElements","x","td","appendChild","push","createCells","Array","fill","generateInEmptyCell","Math","floor","random","draw","v","innerHTML","String","classList","value","add","toString","slide","array","origSize","filterEmpty","a","filter","newArray","length","i","slideLeft","changed","oldArray","from","join","swap","x1","y1","x2","y2","temp","mirror","xLeft","xRight","transpose","moveLeft","moveRight","moveUp","moveDown","isGameOver","c","init","forEach","addEventListener","e","keyCode","key","ok","Boolean","remove"],"mappings":"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","file":"main.111d2c97.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst game = document.querySelector('.container');\nconst gameField = game.querySelector('.game-field');\nconst startButton = game.querySelector('.button');\nconst startGame = game.querySelector('.message-start');\nconst gameOver = game.querySelector('.message-lose');\nconst score = game.querySelector('.game-score');\n\nconst htmlElements = [];\nlet cells = [];\nconst size = 4;\nlet scoreTotal = 0;\n\nfunction createField() {\n  for (let y = 0; y < size; y++) {\n    const tr = game.querySelector('.field-row');\n    const trElements = [];\n\n    for (let x = 0; x < size; x++) {\n      const td = game.querySelector('.field-cell');\n\n      tr.appendChild(td);\n      trElements.push(td);\n    }\n    htmlElements.push(trElements);\n    gameField.appendChild(tr);\n  }\n}\n\nfunction createCells() {\n  for (let y = 0; y < size; y++) {\n    cells.push(new Array(size).fill(0));\n  }\n}\n\nfunction generateInEmptyCell() {\n  let x, y;\n\n  do {\n    x = Math.floor(Math.random() * size);\n    y = Math.floor(Math.random() * size);\n\n    if (cells[y][x] === 0) {\n      cells[y][x] = Math.random() >= 0.9 ? 4 : 2;\n      break;\n    }\n  } while (true);\n}\n\nfunction draw() {\n  for (let y = 0; y < size; y++) {\n    for (let x = 0; x < size; x++) {\n      const td = htmlElements[y][x];\n      const v = cells[y][x];\n\n      td.innerHTML = v === 0 ? '' : String(v);\n\n      td.classList.value = '';\n      td.classList.add('field-cell');\n\n      if (v > 0) {\n        if (v <= 2048) {\n          td.classList.add('field-cell--' + v.toString());\n        }\n      }\n    }\n  }\n}\n\nfunction slide(array, origSize) {\n  function filterEmpty(a) {\n    return a.filter(x => x !== 0);\n  }\n\n  let newArray = filterEmpty(array);\n\n  if (newArray.length > 0) {\n    for (let i = 0; i < newArray.length - 1; i++) {\n      if (newArray[i] === newArray[i + 1]) {\n        newArray[i] *= 2;\n        scoreTotal += newArray[i];\n        newArray[i + 1] = 0;\n      }\n    }\n  }\n  newArray = filterEmpty(newArray);\n\n  while (newArray.length < origSize) {\n    newArray.push(0);\n  }\n\n  return newArray;\n}\n\nfunction slideLeft() {\n  let changed = false;\n\n  for (let y = 0; y < size; y++) {\n    const oldArray = Array.from(cells[y]);\n\n    cells[y] = slide(cells[y], size);\n    changed = changed || (cells[y].join(',') !== oldArray.join(','));\n  }\n\n  return changed;\n}\n\nfunction swap(x1, y1, x2, y2) {\n  const temp = cells[y1][x1];\n\n  cells[y1][x1] = cells[y2][x2];\n  cells[y2][x2] = temp;\n}\n\nfunction mirror() {\n  for (let y = 0; y < size; y++) {\n    for (let xLeft = 0, xRight = size - 1; xLeft < xRight; xLeft++, xRight--) {\n      swap(xLeft, y, xRight, y);\n    }\n  }\n}\n\nfunction transpose() {\n  for (let y = 0; y < size; y++) {\n    for (let x = 0; x < y; x++) {\n      swap(x, y, y, x);\n    }\n  }\n}\n\nfunction moveLeft() {\n  return slideLeft();\n}\n\nfunction moveRight() {\n  mirror();\n\n  const changed = moveLeft();\n\n  mirror();\n\n  return changed;\n}\n\nfunction moveUp() {\n  transpose();\n\n  const changed = moveLeft();\n\n  transpose();\n\n  return changed;\n}\n\nfunction moveDown() {\n  transpose();\n\n  const changed = moveRight();\n\n  transpose();\n\n  return changed;\n}\n\nfunction isGameOver() {\n  for (let y = 0; y < size; y++) {\n    for (let x = 0; x < size; x++) {\n      if (cells[y][x] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let y = 0; y < size - 1; y++) {\n    for (let x = 0; x < size - 1; x++) {\n      const c = cells[y][x];\n\n      if (c !== 0 && (c === cells[y + 1][x] || c === cells[y][x + 1])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nstartButton.addEventListener('click', () => {\n  startGame.classList.add('hidden');\n});\n\ngame.addEventListener('keydown', function(e) {\n  const keyCode = e.key;\n  let ok = Boolean;\n\n  switch (keyCode) {\n    case 'ArrowDown': ok = moveDown(); break;\n    case 'ArrowUp': ok = moveUp(); break;\n    case 'ArrowLeft': ok = moveLeft(); break;\n    case 'ArrowRight': ok = moveRight(); break;\n    default: return;\n  }\n\n  if (ok) {\n    generateInEmptyCell();\n    draw();\n    score.innerHTML = scoreTotal;\n  }\n\n  startButton.innerHTML = 'Restart';\n\n  startButton.addEventListener('click', () => {\n    score.innerHTML = 0;\n    scoreTotal = 0;\n    cells = [];\n    gameOver.classList.add('hidden');\n    init();\n  });\n\n  if (isGameOver()) {\n    gameOver.classList.remove('hidden');\n  }\n});\n\nfunction init() {\n  createField();\n  createCells();\n  new Array(2).fill(0).forEach(generateInEmptyCell);\n  draw();\n}\n\ninit();\n"]}